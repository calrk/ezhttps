user  root root;
worker_processes  8;

pid /var/run/nginx.pid;

events {
  worker_connections  16384;
  multi_accept on;
  use epoll;
}

http {

  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';

  proxy_intercept_errors on;
  fastcgi_intercept_errors on;

  # Add  logging
  error_log /dev/stdout warn;
  access_log /dev/null;

  keepalive_timeout  65;
  keepalive_requests 100000;

  # enable keepalive connections to upstream servers
  proxy_http_version 1.1;
  proxy_set_header Connection "";

  tcp_nopush on;
  tcp_nodelay on;

  client_header_timeout  3m;
  client_body_timeout    3m;
  send_timeout           3m;
  client_max_body_size  200m;

  #store and pass on requests up to this size in memory (e.g. binary uploads)
  client_body_buffer_size     5M;

  #use google as dns for dev proxying
  resolver 8.8.8.8;


  gzip on;
  gzip_buffers  32 32k;
  gzip_min_length 1000;
  gzip_vary on;
  gzip_types text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js application/json application/x-font-ttf application/vnd.ms-fontobject font/x-woff application/font-woff2  application/x-font-otf font/opentype application/x-font-ttf image/svg+xml image/x-icon application/vnd.api+json;

  include       /etc/nginx/mime.types;
  types{
    application/x-font-ttf           ttc ttf;
    application/x-font-otf           otf;
    application/font-woff            woff;
    application/font-woff2           woff2;
    application/vnd.ms-fontobject    eot;
  }

  server {
    #listen   80; ## listen for ipv4; this line is default and implied
    #listen  [::]:80 default ipv6only=on; ## listen for ipv6
    listen 443 ssl http2 ;
    listen [::]:443 ssl http2 ;
    ssl on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_certificate     /var/plattar/nginx-selfsigned.crt;
    ssl_certificate_key /var/plattar/nginx-selfsigned.key;

    root /usr/share/nginx/html/files;
    index index.html index.htm;

    server_name web;

    add_header 'Access-Control-Allow-Origin' "$http_origin" always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'Access-Control-Allow-Credentials,Accept,Authorization,Cache-Control,Content-Type,Content-Length,DNT,If-Modified-Since,If-None-Match,Keep-Alive,X-Mx-ReqToken,X-Requested-With,User-Agent';
    add_header 'Access-Control-Allow-Credentials' 'true';
    #use separate directio threads for files > 16MB
    aio threads;
    directio 32M;

    output_buffers 32 128k;

    # faster static files (no buffering)
    sendfile           on;
    sendfile_max_chunk 256k;

    #Handle pre-flight OPTIONS request manually as amazingly nginx doesnt. This allows cross domain auth by replacing 'verb not supported' error codes (since we intend to support all verbs, but nginx doesn't support options)
    error_page 405 =200 @405;
    location @405 {
      # Tell client that this pre-flight info is valid for 20 days, already-added headers need to be redefined here also.
      add_header 'Access-Control-Allow-Origin' "$http_origin" always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Access-Control-Allow-Credentials,Accept,Authorization,Cache-Control,Content-Type,Content-Length,DNT,If-Modified-Since,If-None-Match,Keep-Alive,X-Mx-ReqToken,X-Requested-With,User-Agent';
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Vary' 'Origin';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
    }

    location / {
      #try_files $uri $uri/ =404;
      try_files $uri $uri/ /index.html?$query_string;
    }

    location ^~ /home  {
      return 301 /files/;
    }

    #error_page 404 /assets/error-404.html;
    #error_page 500 /assets/error-500.html;

    location ^~ /files/ {
      alias /usr/share/nginx/html/files/;

    }
  }
}
